{"meta":{"title":"SaltA's Utopia","subtitle":"","description":"像你这样的惊喜，可遇而不可求呢…","author":"Salt Apocalypse","url":"http://SaltApocalypse.github.io","root":"/"},"pages":[{"title":"关于我","date":"2021-09-09T10:00:00.000Z","updated":"2023-07-05T12:57:06.000Z","comments":false,"path":"about/index.html","permalink":"http://saltapocalypse.github.io/about/index.html","excerpt":"","text":"Hello,traveler. 与&nbsp; SaltA&nbsp; （ A(pocalypse) ） 对话中... bot_ui_ini()"},{"title":"分类","date":"2021-09-08T16:00:00.000Z","updated":"2023-07-10T07:29:02.000Z","comments":false,"path":"categories/index.html","permalink":"http://saltapocalypse.github.io/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2023-07-07T12:00:00.000Z","updated":"2023-07-17T18:06:39.000Z","comments":true,"path":"links/index.html","permalink":"http://saltapocalypse.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-09-08T16:00:00.000Z","updated":"2023-07-08T03:25:07.000Z","comments":false,"path":"tags/index.html","permalink":"http://saltapocalypse.github.io/tags/index.html","excerpt":"","text":""},{"title":"test","date":"2023-07-16T16:00:00.000Z","updated":"2023-07-16T17:39:35.000Z","comments":true,"path":"test/index.html","permalink":"http://saltapocalypse.github.io/test/index.html","excerpt":"","text":""}],"posts":[{"title":"月下初拥主题光标","slug":"Cursor-Luna_Kindred","date":"2023-07-15T16:00:00.000Z","updated":"2023-08-04T08:13:06.000Z","comments":true,"path":"post/230716.html","link":"","permalink":"http://saltapocalypse.github.io/post/230716.html","excerpt":"","text":"简单介绍一套像素风格的、以月下初拥花裳月纱皮肤为原型绘制并制作的光标，可用来替换Windows默认的17种基本光标。 由Execute和SaltA用❤️制作！ 宣传视频 - Bilibili 下载地址月下初拥主题光标下载（百度云） 衍生表情包下载（百度云） 使用方法安装光标 下载光标并解压，打开后双击其中的右键该文件，选择安装（如有弹窗请选择“确定”）.inf文件。 在弹出的鼠标 属性窗口中选择指针选项卡，将方案修改为Luna_kindred，点击下方确定。 替换光标 前排提示： 考虑到文本选择的光标设计和常规的光标设计有些区别，设计了额外的文本选择光标供选择，可以根据需要替换。 两种替换文字的区别在于响应点，可以根据喜好尝试区别。（开个Word文档试着选中一些文字就能感觉出区别） 打开Windows设置，在搜索框中搜索鼠标设置，找到其他鼠标选项（也就是安装光标中的鼠标 属性窗口）。 选择指针选项卡，在自定义中双击点开（或选择要修改的图标后点击浏览）你要修改的光标，找到你下载并解压好的光标文件夹中要替换的光标即可。 调整光标大小 前排提示： 使用这套光标后，默认大小会比较小，需要手动调整光标大小，个人推荐的鼠标大小为 4 。 打开 Windows设置 ，在搜索框中搜索 鼠标指针大小 ，并修改到你觉得合适的大小。 打开Windows设置 ，在搜索框中搜索鼠标设置，找到其他鼠标选项（也就是安装光标中的鼠标 属性窗口）。 选择指针选项卡，在方案中选择 Luna_Kindred ，点底下的确定。 （窗口同上面的一样，插图就不再重复放啦~） 附加内容聊天用表情包你可以直接在上面的[**下载地址**](# 下载地址)中找到该套光标衍生的表情包（ png 和 gif 等）。 欢迎随意使用并且再次创作，能顺便宣传一波就更好啦（让Exe老师的表情包入侵所有群）。 将光标和表情包用于Web！ 我将这套表情包和光标（含静态光标）放在了 Github 仓库中，你可以借助下面的经加速的链接来更方便地使用这些资源。 你可以点击下面链接查看可使用的资源： 点击访问：Github仓库。 使用 jsDelivr 加速：https://cdn.jsdelivr.net/gh/907577659/CDN/Cursor_Luna_Kindred/+具体资源。 ©copyright 2023 Execute ©copyright 2023 Salt_Apocalypse","categories":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"}],"tags":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"},{"name":"TeriTeri","slug":"TeriTeri","permalink":"http://saltapocalypse.github.io/tags/TeriTeri/"}]},{"title":"总结一下博客迁移的经验","slug":"BlogMigration","date":"2023-07-02T16:00:00.000Z","updated":"2023-07-29T09:00:09.000Z","comments":true,"path":"post/230703.html","link":"","permalink":"http://saltapocalypse.github.io/post/230703.html","excerpt":"","text":"问题提出每次重装系统或者换设备，由于我菜，我都只能重新安装hexo然后再去复制那些_config之类的文件。 在更深入地了解之后，简单整理了一下流程。 操作办法 首次部署指路：从零搭建 Hexo + Github 博客 | Venus’ Blog 我按照此方法部署，根目录为\\Blog，博客内容根目录\\Blog\\SaltA 前置准备 Git - Downloads (git-scm.com) Node.js (nodejs.org) 开始实践 重新配置GitHub的SSH 打开git-bash.exe. 输入生成ssh命令ssh-keygen -t rsa -C \"your_email@example.com\"，四次回车。 在GitHub生成SSH Key，内容来自C:\\Users&lt;用户名&gt;.ssh\\id-rsa.pub`文件。 给博客安装环境 打开cmd，进入\\Blog. 在\\Blog中执行npm install hexo-cli. 进入\\Blog\\SaltA，执行npm install以及npm install hexo-deployer-git --save. 上传至GitHub仓库 设置好_config.yml，因为一直在云盘里不是重新部署所以我不用设置。 使用git bash配置Git： git config --global user.email \"your_email@example.com\" git config --global user.name \"your_username\" 尝试上传hexo g&amp;hexo d。 相关问题：FATAL: unable to access ‘https://github.com/username/username.github.io.git‘: failed to connect to github.com port 443 after 21106 ms: couldn’t connect to server 使用https远程连接至仓库可能会因为网络等原因带来诸多不便。 建议使用SSH远程连接至仓库。 并且建议使用git-bash来完成例如(npx) hexo g -d等操作。 恭喜完成重新部署。 后记Git使用SSH连接问题提出可能在安装好Git之后，会默认使用https为控制用于克隆 GitHub 仓库的协议。 问题解决 确保已经安装好Git并且配置好email和name等信息。 打开终端，输入ssh -T git@github.com。 相关问题：若出现警告The authenticity of host ‘github.com (20.205.243.166)’ can’t be established.ECDSA key fingerprint is SHA256:&lt;SHA256&gt;.Are you sure you want to continue connecting (yes/no/[fingerprint])? 输入yes确认即可。 此时返回Hi You’ve successfully authenticated, but GitHub does not provide shell access.则说明配置成功。 通过git remote -v可以查看当前仓库的链接方式是https还是SSH。 VSCode的Git插件上传到仓库 (errno 10054)问题提出我真的好喜欢利用VSCode的工作区来管理Git仓库啊。 我还有些别的用法，比如管理我的CDN，CDN仓库本地有一份，配置好之后VSC上推送同步（对，我甚至不需要图床，还是本地整理好上传，因为放OD里面，东西多了释放空间即可），但是一开始Git上传，会出现无法同步等问题。我遇到比较多的是errno 10054。 问题解决 其实可以说还是和上面那个同样的问题，传不上去到Github，VSC默认使用的控制用于克隆 GitHub 仓库的协议也是https。 打开设置Ctrl + ,，搜索框内搜索SSH，筛选出的列表中选择GitHub，会发现有一条设置叫做Github: Git Protocol（控制用于克隆 GitHub 仓库的协议），修改为ssh。 重启VSC，问题应该解决。 注：可能需要登录并授权VSC、Git插件与GitHub连接的权限。","categories":[{"name":"经验整理","slug":"经验整理","permalink":"http://saltapocalypse.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%95%B4%E7%90%86/"}],"tags":[{"name":"Deploy","slug":"Deploy","permalink":"http://saltapocalypse.github.io/tags/Deploy/"},{"name":"Blog","slug":"Blog","permalink":"http://saltapocalypse.github.io/tags/Blog/"}]},{"title":"使用VSCode进行C/C++操作MySQL的环境配置（windows适用）","slug":"VSCode&Cpp&MySQL","date":"2023-06-12T16:00:00.000Z","updated":"2023-08-04T07:50:57.000Z","comments":true,"path":"post/230613.html","link":"","permalink":"http://saltapocalypse.github.io/post/230613.html","excerpt":"","text":"前言 本教程受众： 想要部署VSCode并配置环境来写C/C++程序。（只看MinGW-w64部署和VSCode部署） 上一点搞定，希望能用VSCode来写C/C++操作MySQL。（只看MySQL部署） 硬性条件：只针对Windows用户。 教程可能会比较啰嗦，但绝对详细，跟着一步步来可以保证大概率正确。╰(°▽°)╯ 约定： 行内代码块内放一些关键内容（你需要点的操作，按钮的名字等）。 粗体字表示你需要注意的内容。 可能会出现的问题，我会放在引用块内，就像这样。 作者水平不够高，如果出现错误还请各位批评指正。 MySQL部署前置条件 相关问题：我可以直接从这里开始看吗？ 在部署MySQL之前请确保完成下面两项，没完成也不要紧，下面还有对应教程，完成之后再回来。 已完成的请继续看MySQL部署。 下载并安装GCC编译器 MinGW-w64，且配置好了。 下载并安装代码编辑器 VSCode，且配置好了。 MySQL数据库相关知识，我现在情况是学期末要做MySQL数据库实验要求用C/C++操作MySQL。 下载安装 进入官网MySQL :: Download MySQL Installer下载MySQL，选上面那个比较小的在线安装。 下载完成之后打开安装包，继续，Download界面可以直接选择默认（第一项，这样子Workbench也会自动下好）。 下载好之后是安装，不断继续，但是注意两个问题。 在安装之后的配置过程中，会让你设置本地数据库的root账号的密码，请一定要牢记！（或者你写什么地方求求了丢了我不管啊） 配置过程之后会有一个服务名称，不是特别重要也还是请你记一下，默认是MySQL80。 注意这两个问题，之后就完事了。 能在任务管理器（Ctrl+Shift+Esc）的服务中看到这个服务，就说明安装完成，并且已经在运行了。 建立测试数据库 先自己建立一个视图，记住视图名称，建立一张表随便整点数据。 配置环境变量 打开环境变量，在Path，写入你本地数据库的include、lib还有bin。（不会的话百度或者看我下面配置minGw） 配置VSCode 提前备份好你的VSCode工作区，如果按照我下文的教程，那就是C_Cpp文件夹。 打开.vscode/c_cpp_properties.json，如果没有手动创建一个，打开后在includePath这行添加你的MySQL服务器所带的include，MySQL服务器默认安装路径在C:\\\\Program Files\\\\MySQL\\\\MySQL Server 8.0。 相关问题：输入了，但是有黄线。 说明路径不对，再检查检查。 相关问题：输入了，但是有红线提示和红色字符。 如果是从资源管理器的URL复制下来的，请你检查反斜杠是不是两个，一个会被识别成未知转义字符。 相关问题：输入了，但是有红线。 你看看是不是上一行行末逗号没加或者加了中文逗号？ 打开.vscode/tasks.json，找到args，编译器的参数，目录选项要加上链接库（大写-L）、包含路径（大写-I）和引用链接库（小写-l）。如下图所示，我也会放出部分代码，请按照自己实际情况填写。 \"args\": [ \"-fdiagnostics-color=always\", \"-g\", \"${fileDirname}\\\\Main.cpp\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\", \"-I\", \"C:\\\\Program Files\\\\MySQL\\\\MySQL Server 8.0\\\\include\", \"-L\", \"C:\\\\Program Files\\\\MySQL\\\\MySQL Server 8.0\\\\lib\", \"-l\", \"mysql\" ] 测试环境是否可用 尝试写一个数据库访问程序来测试一下，这里放上我的作参考。 #include #include #include #include #include #include #include #include // 路径得对 #pragma comment(lib, \"libmysql\") using namespace std; /* 数据库连接信息 */ const char *HOST = \"localhost\"; const char *USERNAME = \"root\", *PASSWORD = \"\", // 按照自己的来 *DATABASE = \"\"; // 按照自己的来 /* 全局变量 */ MYSQL mysql; /* 函数 */ // 连接数据库 void connectSQL(); // 主函数 int main() { // cout < \"1\" < endl; // 这些1234都是测试用的 connectSQL(); mysql_close(&mysql); // system(\"pause\"); // cout < \"4\" < endl; return 0; } // 连接数据库 void connectSQL() { // cout < \"2\" < endl; mysql_init(&mysql); unsigned int timeout = 3; // 设置超时时间 mysql_options(&mysql, MYSQL_OPT_CONNECT_TIMEOUT, &timeout); // cout < \"3\" < endl; if (mysql_real_connect(&mysql, HOST, USERNAME, PASSWORD, DATABASE, 0, NULL, CLIENT_FOUND_ROWS)) { cout < \"数据库已连接成功，正在加载目录，请根据提示进行操作\" < endl; mysql_query(&mysql, \"set names utf8\"); } else { cout < \"数据库连接失败，请查看数据库连接信息！\" < endl; const char *error = mysql_error(&mysql); std::cout < error < std::endl; } }","categories":[{"name":"经验整理","slug":"经验整理","permalink":"http://saltapocalypse.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%95%B4%E7%90%86/"}],"tags":[{"name":"Deploy","slug":"Deploy","permalink":"http://saltapocalypse.github.io/tags/Deploy/"},{"name":"VSCode","slug":"VSCode","permalink":"http://saltapocalypse.github.io/tags/VSCode/"},{"name":"MySQL","slug":"MySQL","permalink":"http://saltapocalypse.github.io/tags/MySQL/"}]},{"title":"teriteri——自己写着玩的Typora主题","slug":"teriteri","date":"2023-03-27T16:00:00.000Z","updated":"2023-07-25T16:18:22.000Z","comments":true,"path":"post/230328.html","link":"","permalink":"http://saltapocalypse.github.io/post/230328.html","excerpt":"","text":"⚠️ 阅读前注意 ⚠️ 该主题现阶段做工粗糙，不适合重度使用。使用的时候可能会出现未预期的问题，尽请见谅。 （更新于2023/07/26） 简单介绍一款以德丽莎的同人插画为背景的Typora主题（Light），整体色调偏粉，有较花里胡哨的反常规设计和动画。 主题特点 漂亮的背景！Teriri!Teriri!Teriri! 背景使用了淺春老师的插画（左侧链接直达）。 关于授权：老师的Pixiv主页有写“转载随意”，但我仍去私信问了一遍，还在等待回复中。（如侵权还请麻烦私信我删除） 粉色调为主！猛男狂喜！ 流（花）畅（里）丝（胡）滑（哨）的动画（其实并不至于）和比较鲜艳的代码块配色（我~喜~欢~（大喊） 好看的字体！哇！是思源黑体 （中文）和Cascadia Code（代码部分）！ 本主题由民间某特日日粉丝团成员制作，助您随时随地宣传特日日神教（bushi） 可能非常垃圾的设计 ，因为我也不是很有美术细胞和美术上的感觉。（等下这算特点？！） 经常持续更新！（可能看心情但是我肯定要继续做下去的，包括深色模式之类的） 总之欢迎各位下载使用啦~ 预览图片 下载地址（含使用指南）Github项目库：teriteri: A Typora theme by SaltA. ) 后面是一些自己的废话一直以来都喜欢用markdown写各种东西，从笔记到一夜几千字肝申请书，写教程写文档都喜欢拿md，用的软件一直也是Typora。自从发现主题可以自定义（后来是自己写）了之后，就想着写一个以德为主题的主题，结合了半年多的失败经验终于写了一个（算是原创）的主题，正好赶着德生日做完当庆生啦~ 正如标题所言，这是一个自己写着玩的Typora（日间）主题（夜间的也准备写了，想约张稿做背景，每天熬到两三点写代码一会儿VSCode夜间舒服一会儿打开Typora测试样式脸照得发白太痛苦了），所以有比较多的个人喜好并且并不是那么地常规（指部分地方有些反常或者反常识的设计）。 代码部分分享给各位，如果真有想要用的或者自己改着用的，可以自行按照自己的需要修改。 如果有大佬愿意约稿（我想约一张做后面深色模式的背景）也可以私我捏。 以前每年就都是一句简单的生日快乐，今年算是拿了点不一样的东西（尽管比不上各位大佬们）展现自己的厨力了捏（雾）。 好嘛！世界第一可爱的德丽莎，生日快乐！ 2023/03/27 Salt Apocalypse","categories":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"}],"tags":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"},{"name":"TeriTeri","slug":"TeriTeri","permalink":"http://saltapocalypse.github.io/tags/TeriTeri/"}]},{"title":"Aquamarine量化考核数据处理软件(AQAS)","slug":"Aquamarine_QAS","date":"2021-09-30T16:00:00.000Z","updated":"2023-07-15T17:31:02.000Z","comments":true,"path":"post/210117.html","link":"","permalink":"http://saltapocalypse.github.io/post/210117.html","excerpt":"Aquamarine量化考核数据处理软件 [Aquamarine Quantitative Assessment Data Processing Software]","text":"Aquamarine量化考核数据处理软件 [Aquamarine Quantitative Assessment Data Processing Software] 前排提示：该项目介绍仅作为归档留念使用，为避免隐私泄露，有删改。 项目介绍本程序旨在结合“班级的班规将学生表现以分数量化”与非纸笔数据处理方式，提高量化考核数据处理效率。 本程序提供数据录入、查询、排序、筛选、打印等功能，方便数据管理，适用于多种环境和条件。 本程序自2019年9月发布1.0版本，历经几十次大大小小的更新完善，现最终版本为V2.6. 具体的介绍请见软件使用教程。 发布时间：2021/01/17（日） 下载地址 软件下载 （百度云盘-提取码：2021） Aqumarine量化考核数据处理软件 V2.6 测试文件 自述文件下载（暂不可用）因新版本改动较大，需要重新编写自述文件，敬请期待！ （2021/02/05更新）因登记软件著作权进行了大量修改，原来写完的自述文件需要修改，暂不可用。 （2021/09/10更新）修改完成，因为上传大小限制正在考虑其他方式部署下载链接。 由浙师大附中创新智造社 Aquamarine Creative Technology 成员 Salt Apocalypse 制作。 © Salt Apocalypse All Rights Reserved.","categories":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"}],"tags":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"}]},{"title":"海蓝宝石——智慧敬老院","slug":"Aquamarine_WNH","date":"2021-09-30T16:00:00.000Z","updated":"2023-07-15T17:31:04.000Z","comments":true,"path":"post/191208.html","link":"","permalink":"http://saltapocalypse.github.io/post/191208.html","excerpt":"海蓝宝石“智慧敬老院”项目介绍 Aquamarine Wisdom Nursing Home","text":"海蓝宝石“智慧敬老院”项目介绍 Aquamarine Wisdom Nursing Home 前排提示：该项目介绍仅作为归档留念使用，为避免隐私泄露，有删改。 简介视频 灵感来源 社会现状：根据中国老龄科学研究中心与社会科学文献出版社共同发布的《老龄蓝皮书：中国城乡老年人生活状况调查报告（2018）》显示：我国仅约三成老年人健康状况较好。我国目前有高龄老年人3000多万，失能老年人4000多万，其中很大一部分都是自报需护理的。据北京晚报的调查称目前护理员从业人员仅不到30万而需求却是1300万 。北京劳动保障职业学院曾对老年服务与管理专业的多名毕业生进行调研，毕业一年后，留在养老一线的人员不到28%，毕业两年后的一线流失率更是达到惊人的94.7%。 我们在想，是否能利用 人工智能 让老人的生活拥有更多的乐趣，让老人们拥有一个更加美好的晚年生活呢？于是我们开始尝试使用 Pepper 来实现我们的想法。在我们的努力下，这个想法得以实现。 主要功能（我们的作品在功能方面不仅面向老人，还面向访客） 面向老人自我介绍、查询气象预报、每日新闻播报、唱歌、舞蹈表演、相声表演等功能。 面向访客自我介绍、与访客打招呼并欢迎、查询家属信息、查询医生护工信息等功能。 关键技术引用API接口 调用天气预报接口：播报当天任意城市的天气（Demo中只举例了几个城市，如南京、金华等），并能据此给老人穿衣提示等生活服务。 调用热点新闻接口：为老人播报当天的热点新闻。 人工智能技术 语音识别：所有菜单支持语音操控，部分板块支持语音交互。 人脸识别：识别访客/用户信息并与数据库匹配。 多媒体 多媒体娱乐：能为老人提供相声、音乐、舞蹈等娱乐。 引导功能模块：能引导访客查询家属房间信息。 动作的时间线编排：与背景音乐匹配的舞蹈，娱乐项目之一。 交互技术与数据库技术 网页式交互：由HTML语言编写的可触屏交互的互动界面。 人脸识别数据库：匹配识别数据并返回访客/用户相关信息。 制作团队制作团队：AquamarineCT（Aquamarine Creative Technology） 指导老师：李老师 范老师 特别感谢：胡/董/尤/王 四位 浙江师范大学附属中学——创新智造社 2019年12月 © Aquamarine Creative Technology All Rights Reserved.","categories":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"}],"tags":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"},{"name":"AquamarineCT","slug":"AquamarineCT","permalink":"http://saltapocalypse.github.io/tags/AquamarineCT/"},{"name":"Pepper","slug":"Pepper","permalink":"http://saltapocalypse.github.io/tags/Pepper/"}]}],"categories":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"},{"name":"经验整理","slug":"经验整理","permalink":"http://saltapocalypse.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%95%B4%E7%90%86/"}],"tags":[{"name":"项目发布","slug":"项目发布","permalink":"http://saltapocalypse.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83/"},{"name":"TeriTeri","slug":"TeriTeri","permalink":"http://saltapocalypse.github.io/tags/TeriTeri/"},{"name":"Deploy","slug":"Deploy","permalink":"http://saltapocalypse.github.io/tags/Deploy/"},{"name":"Blog","slug":"Blog","permalink":"http://saltapocalypse.github.io/tags/Blog/"},{"name":"VSCode","slug":"VSCode","permalink":"http://saltapocalypse.github.io/tags/VSCode/"},{"name":"MySQL","slug":"MySQL","permalink":"http://saltapocalypse.github.io/tags/MySQL/"},{"name":"AquamarineCT","slug":"AquamarineCT","permalink":"http://saltapocalypse.github.io/tags/AquamarineCT/"},{"name":"Pepper","slug":"Pepper","permalink":"http://saltapocalypse.github.io/tags/Pepper/"}]}